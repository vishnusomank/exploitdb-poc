package server

import (
	"net/http"

	"github.com/inconshreveable/log15"
	"github.com/labstack/echo"
	"golang.org/x/xerrors"
)

func Health() echo.HandlerFunc {
	return func(context echo.Context) error {
		return context.String(http.StatusOK, "")
	}
}

func HetExploitByCveID(driver db.DB) echo.HandlerFunc {
	return func(context echo.Context) (err error) {
		cve := context.Param("cve")
		log15.Debug("Params", "CVE", cve)

		exploits, err := driver.GetExploitByCveID(cve)
		if err != nil {
			return xerrors.Errorf("Failed to get Exploit Info by CVE. err: %w", err)
		}
		return context.JSON(http.StatusOK, exploits)
	}
}

type param struct {
	Args []string `json:"args"`
}

func GetExploitMultiByCveID(driver db.DB) echo.HandlerFunc {
	return func(context echo.Context) (err error) {
		cveIDs := param{}
		if err := context.Bind(&cveIDs); err != nil {
			return err
		}
		log15.Debug("Params", "CVEIDs", cveIDs.Args)

		exploits, err := driver.GetExploitMultiByCveID(cveIDs.Args)
		if err != nil {
			return xerrors.Errorf("Failed to get Exploit Info by CVE. err: %w", err)
		}
		return context.JSON(http.StatusOK, exploits)
	}
}

func GetExploitAll(driver db.DB) echo.HandlerFunc {
	return func(context echo.Context) (err error) {
		exploits, err := driver.GetExploitAll()
		if err != nil {
			return xerrors.Errorf("Failed to get All Exploit. err: %w", err)
		}
		return context.JSON(http.StatusOK, exploits)
	}
}
